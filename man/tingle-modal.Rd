% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tingle-modal.R
\name{tingle-modal}
\alias{tingle-modal}
\alias{load_tingle}
\alias{tingle_show}
\alias{tingle_dialog}
\alias{tingle_button}
\alias{tingle_remove}
\title{Tingle modal}
\usage{
load_tingle()

tingle_show(ui, close_id = NULL, session = getDefaultReactiveDomain())

tingle_dialog(..., footer = tingle_button(), easy_close = TRUE,
  sticky_footer = FALSE, css_class = NULL)

tingle_button(label = "Close", status = "default", pull_right = TRUE)

tingle_remove(session = getDefaultReactiveDomain())
}
\arguments{
\item{ui}{Content of the modal defined with \code{tingle_dialog}.}

\item{close_id}{Optionnal \code{inputId} to retrieve server-side when modal is closed by user.}

\item{session}{The \code{session} object passed to function given to shinyServer.}

\item{...}{UI elements for the body of the modal dialog box.}

\item{footer}{UI for footer. Use NULL for no footer.}

\item{easy_close}{If \code{TRUE}, the modal dialog can be dismissed by clicking
outside the dialog box, or be pressing the Escape key, or by clicking the close button.}

\item{sticky_footer}{Set to \code{TRUE} for a footer always visible on screen.}

\item{css_class}{Custom CSS classes that will be added to tingle container.}

\item{label}{The contents of the button or linkâ€“usually a text label, but you could also use any other HTML, like an image.}

\item{status}{Status for the button: \code{"default"} (default), \code{"primary"} or \code{"danger"}.}

\item{pull_right}{Align the button on the right.}
}
\description{
An alternative modal window. Load dependencies in
 UI with \code{load_tingle}, use \code{tingle_*} in server.
}
\examples{
if (interactive()) {
  library(shiny)
  library(shinytools)

  ui <- fluidPage(

    load_tingle(),

    tags$h1("Examples tingle modal"),

    actionButton(inputId = "launch1", label = "Open modal"),
    actionButton(inputId = "launch2", label = "Another one")
  )

  server <- function(input, output, session) {


    output$plot <- renderPlot({
      req(input$n)
      hist(rnorm(input$n))
    })

    observeEvent(input$launch1, {
      tingle_show(tingle_dialog(
        tags$h2("Yes! A modal!"),
        plotOutput(outputId = "plot"),
        sliderInput(
          inputId = "n", label = "Number of observations",
          min = 10, max = 200, value = 20, width = "100\%"
        )
      ))
    })

    observeEvent(input$launch2, {
      tingle_show(tingle_dialog(
        tags$h2("Very important!"),
        tags$p("Do you like Shiny?"),
        footer = tagList(
          actionButton("ofcourse", "Of course!", width = "49\%"),
          actionButton("yes", "Yes!", width = "49\%")
        ),
        easy_close = FALSE
      ))
    })

    observe({
      input$ofcourse
      input$yes
      tingle_remove()
    })

  }

  shinyApp(ui, server)
}
}
