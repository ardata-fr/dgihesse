% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/active.R
\name{activate}
\alias{activate}
\alias{html_set_active}
\alias{html_set_inactive}
\title{set an element as active or inactive}
\usage{
activate(id, state)

html_set_active(id)

html_set_inactive(id)
}
\arguments{
\item{id}{shiny input id}

\item{state}{logical scalar. If state is \code{TRUE},
element will be set as active, if \code{FALSE}, element will be set as inactive.}
}
\description{
\code{activate} will set an element as active or inactive.
\code{html_set_active} will make an element active.
\code{html_set_inactive} will hide an element inactive.
}
\examples{
library(shinytools)

if (interactive()) {
  options(device.ask.default = FALSE)

  ui <- fluidPage(
    titlePanel("Hello dghiesse!"),
    load_jstools(),
    sidebarLayout(
      sidebarPanel(
        actionButton("activate", "activate"),
        actionButton("inactivate", "inactivate")
      ),
      mainPanel(
        actionButton("anybutton", "watch this button", class = "btn-info")
      )
    )
  )

  server <- function(input, output) {
    observeEvent(input$activate, {
      html_set_active("anybutton")
    })
    observeEvent(input$inactivate, {
      html_set_inactive("anybutton")
    })
  }

  print(shinyApp(ui, server))
}
}
\seealso{
Other javascript functions: \code{\link{ability}},
  \code{\link{click_event}}, \code{\link{html_class}},
  \code{\link{html_toogle}}
}
\concept{javascript functions}
