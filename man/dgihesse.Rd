% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/giesse.R
\name{load_dgihesse}
\alias{load_dgihesse}
\alias{toogle}
\alias{switch_validity}
\alias{set_active}
\alias{html_unclass}
\alias{html_addclass}
\title{add interactivity from shiny server}
\usage{
load_dgihesse()

toogle(id)

switch_validity(id, state)

set_active(id, state)

html_unclass(id, classname)

html_addclass(id, classname)
}
\arguments{
\item{id}{shiny input id}

\item{state}{logical scalar}

\item{classname}{class name}
}
\description{
get dgihesse javascript dependancy suitable
for insertion in the \code{ui} part of a shiny application.
}
\section{toogle}{

Display or hide an element with function \code{toogle}.
}

\section{disabled}{

Desable or enable an element with function \code{disabled}.

if state is \code{TRUE}, element will be disabled,
if \code{FALSE}, element will be enabled.
}

\section{set_active}{

Add or remove 'active' class to an HTML element
with function \code{set_active}. This is
to be used on buttons in shiny applications.
}

\section{html_unclass}{

Remove a class from an HTML element
with function \code{html_unclass}.
}

\section{html_addclass}{

Add a class to an HTML element
with function \code{html_addclass}.
}

\examples{
\dontrun{
library(dgihesse)
library(shinyWidgets)
classes <- c("primary", "secondary",
  "success", "danger", "warning", "info")

## Only run examples in interactive R sessions
if (interactive()) {
  options(device.ask.default = FALSE)

  # Define UI
  ui <- fluidPage(
    titlePanel("Hello dghiesse!"),
    load_dgihesse(),
    sidebarLayout(
      sidebarPanel(
        sliderInput(
          "obs",
          "Number of observations:",
          min = 0, max = 1000, value = 500),
        uiOutput(outputId = "quentin"),
        actionButton("titi", "desable blah blah"),
        actionButton("toogle", "toogle plot"),
        actionButton("disabled", "disabled obs"),
        actionButton("coco", "dqsdqsds"),
        radioButtons("radios", "Options", 1:5),
        selectInput("class", "Variable:",
                    classes),
        div()
      ),
      mainPanel(
        plotOutput("distPlot")
      )
    )
  )

  server <- function(input, output) {
    output$distPlot <- renderPlot({
      hist(rnorm(input$obs))
    })
    observeEvent(input$toogle, {
      toogle("distPlot")
    })
    observeEvent(input$disabled, {
      disabled("obs", input$disabled\%\%2 > 0)
    })
    observeEvent(input$titi, {
      disabled("class", input$titi\%\%2 > 0)
    })
    output$quentin <- renderUI({
      default_disable(
        actionBttn(inputId = "AB_add", label = NULL,
                 icon = icon("plus"), size = "sm", style = "gradient", color = "default")
      )
    })
    observeEvent(input$class, {
      for(i in classes){
        html_unclass("coco", paste0("btn-", i))
      }
      html_addclass("coco", paste0("btn-", input$class))
    })
  }

  print(shinyApp(ui, server))
}
}

}
