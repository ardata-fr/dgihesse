% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filterDf.R
\name{filterDataUI}
\alias{filterDataUI}
\alias{filterDataServer}
\title{shiny UI to filter data}
\usage{
filterDataUI(id)

filterDataServer(input, output, session, x = reactive(NULL),
  default_show = TRUE, show_all_filters = TRUE, return_data = FALSE)
}
\arguments{
\item{id}{namespace identifier for the module}

\item{input, output, session}{mandatory arguments for modules to be valid. These
should not to be defined as they will be handled by shiny.}

\item{x}{the input data.frame to be filtered. It must be a reactive
value.}

\item{default_show}{should the filters be expanded when UI is is shown first. If
FALSE, the UIs showing filters are hidden.}

\item{show_all_filters}{if TRUE, all filters UI are shown. If FALSE, a compact UI
is displayed containing a select box to choose a variable filter and a dynamic
filter corresponding to the filter to display.}

\item{return_data}{whether the filtered dataset should be also returned
in the reactive value returned by the module.}
}
\description{
A module to enable data filtering
in shiny applications. The ui function is populated
with column filters that can be manipulated by the user.
The server function is returning the R expression corresponding
to filters defined by user and eventually the filtered dataset.
}
\examples{
library(shinytools)
library(shiny)

# example with dataTableOutput and renderDataTable ----
if (interactive()) {
  options(device.ask.default = FALSE)

  ui <- fluidPage(
    fluidRow(
      column(
        width = 4,
        filterDataUI(id = "demo")
      ),
      column(width = 8, dataTableOutput(outputId = "subsetdata"))
    )
  )

  server <- function(input, output, session) {
    res <- callModule(module = filterDataServer,
                      id = "demo", x = reactive(iris),
                      return_data = TRUE)

    observe({
      req(res)
      print(res$expr)
    })

    output$subsetdata <- renderDataTable({
      res$filtered_data
    })
  }
  print(shinyApp(ui, server))
}


# example with dataViewerUI and dataViewerServer ----
if (interactive()) {
  options(device.ask.default = FALSE)

  ui <- fluidPage(
    fluidRow(
      column(
        width = 4,
        filterDataUI(id = "demo")
      ),
      column(width = 8, dataViewerUI(id = "subsetdata"))
    )
  )

  server <- function(input, output, session) {
    res <- callModule(module = filterDataServer, id = "demo",
                      x = reactive(mtcars),
                      show_all_filters = FALSE,
                      return_data = TRUE)

    callModule(module = dataViewerServer,
               data = reactive(res$filtered_data),
               id = "subsetdata", part = "all", style = "minimal")
  }
  print(shinyApp(ui, server))
}
}
