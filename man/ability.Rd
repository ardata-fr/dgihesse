% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ability.R
\name{ability}
\alias{ability}
\alias{html_enable}
\alias{html_disable}
\title{enable or disable an element}
\usage{
ability(id, state)

html_enable(id)

html_disable(id)
}
\arguments{
\item{id}{shiny input id}

\item{state}{logical scalar. If state is \code{TRUE},
element will be enabled, if \code{FALSE}, element will be disabled.}
}
\description{
\code{ability} is to be used to enable or disable an element.
\code{html_enable} and \code{html_disable} are shortcut functions.
}
\examples{
library(shiny)
library(shinytools)

if (interactive()) {
  ui <- fluidPage(
    load_jstools(),
    fluidRow(
      column(width = 4,
             actionButton(inputId = "able_slider",
                          label = "[slider] enabled/disabled"),
             br(),br(), br(),
             sliderInput( "slider",
                          "A Number:",
                          min = 0, max = 1000, value = 500)
      ),
      column(width = 4,
             actionButton(inputId = "able_select",
                          label = "[list] enabled/disabled"),
             br(),br(), br(),
             selectizeInput("select", "A select input:", 1:5)
      ),
      column(width = 4,
             actionButton(inputId = "able_btn",
                          label = "[btn] enabled/disabled"),
             br(),br(), br(),
             actionButton("btn", "A button", class = "btn-warning")
      )
    )
  )

  server <- function(input, output) {
    observeEvent(input$able_slider, {
      ability("slider", input$able_slider\%\%2 < 1)
    })
    observeEvent(input$able_btn, {
      ability("btn", input$able_btn\%\%2 < 1)
    })
    observeEvent(input$able_select, {
      ability("select", input$able_select\%\%2 < 1)
    })
  }

  print(shinyApp(ui, server))
}
}
\seealso{
Other javascript functions: \code{\link{activate}},
  \code{\link{click_event}}, \code{\link{html_class}},
  \code{\link{html_toogle}}
}
\concept{javascript functions}
