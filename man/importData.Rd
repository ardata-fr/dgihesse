% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/importData.R
\name{importData}
\alias{importData}
\alias{importDataUI}
\alias{importDataServer}
\title{shiny UI to import data}
\usage{
importDataUI(id)

importDataServer(input, output, session,
  forbidden_labels = reactive(NULL), default_tofact = FALSE,
  ui_element = "actionLink", ui_label = "Import",
  ui_icon = icon("upload"), labelize = TRUE)
}
\arguments{
\item{id}{namespace identifier for the module}

\item{input, output, session}{mandatory arguments for modules to be valid. These
should not to be defined as they will be handled by shiny.}

\item{forbidden_labels}{Optional, reactive value, forbidden labels as a character vector}

\item{default_tofact}{If default convert characters to factors. Default FALSE.}

\item{ui_element}{UI element to show, either "actionButton", or "actionLink". Default "actionLink".}

\item{ui_label}{Label of ui element. Default to "import".}

\item{ui_icon}{Icon of ui element. Default to icon("upload").}

\item{labelize}{if TRUE a label is required to import the data}
}
\description{
A module to enable data importation
in shiny applications, by clicking on a button or link action,
man can open a modal window to let import dataset in shiny application.
The module support CSV, Excel and SAS datasets.
}
\examples{
library(shinytools)
library(shiny)

if (interactive()) {
  options(device.ask.default = FALSE)

ui <- fluidPage(
  importDataUI(id = "id1"),
  tags$hr(),
  uiOutput("ui_SI_labels"),
  dataViewerUI(id = "id2")
)

server <- function(input, output) {

  all_datasets <- reactiveValues()

  datasets <- callModule(module = importDataServer, id = "id1",
    forbidden_labels = reactive(names(reactiveValuesToList(all_datasets))))

  observeEvent(datasets$trigger, {
    req(datasets$trigger > 0)
    all_datasets[[datasets$name]] <- datasets$object
  })

  output$ui_SI_labels <- renderUI({
    x <- reactiveValuesToList(all_datasets)
    if (length(x) > 0) {
      selectInput("SI_labels", label = "Choose dataset", choices = names(x))
    }
  })

  callModule(module = dataViewerServer, id = "id2",
    data = reactive({req(input$SI_labels);all_datasets[[input$SI_labels]]}))
}

  print(shinyApp(ui, server))
}
}
