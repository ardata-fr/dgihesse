% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filterVar.R
\name{filterVarServer}
\alias{filterVarServer}
\title{filterVar}
\usage{
filterVarServer(input, output, session, x = reactive(NULL),
  varname = reactive(NULL), label = reactive(NULL),
  return_datas = FALSE, default = reactive(NULL),
  trigger = reactive(NULL))
}
\description{
filterVar
}
\examples{
library(shinytools)
library(shiny)
library(lubridate)
library(rlang)
if (interactive()) {
  options(device.ask.default = FALSE)

  test_date <- data.frame(col = as.Date(as.character(lakers$date), tryFormats = "\%Y\%m\%d"))
  test_logical <- data.frame(col = sample(c(T,F), size = 100, replace = T))
  test_fact <- data.frame(Species = iris$Species)
  test_char <- data.frame(Species = as.character(iris$Species), stringsAsFactors = FALSE)
  test_num <- data.frame(Sepal.Length = iris$Sepal.Length)

  ui <- fluidPage(
    filterVarUI(id = "date"),
    filterVarUI(id = "logical"),
    filterVarUI(id = "fact"),
    filterVarUI(id = "char"),
    filterVarUI(id = "num")
  )

  server <- function(input, output) {
    # Test date
    res_date <-  callModule(module = filterVarServer, id = "date",
                   x = reactive(test_date),
                   varname = reactive("col"),
                   label = reactive("col"))

    observe({
      req(res_date)
      tmp <- reactiveValuesToList(res_date)
      print(tmp)
    })

    # Test logical
    res_logical <- callModule(module = filterVarServer, id = "logical",
                     x = reactive(test_logical),
                     varname = reactive("col"),
                     label = reactive("col"))

    observe({
      req(res_logical)
      tmp <- reactiveValuesToList(res_logical)
      print(tmp)
    })

    # Test factor
    res_factor <-  callModule(module = filterVarServer, id = "fact",
                     x = reactive(test_fact),
                     varname = reactive("Species"),
                     label = reactive("Species"))

    observe({
      req(res_factor)
      tmp <- reactiveValuesToList(res_factor)
      print(tmp)
    })

    # Test character
    res_char <-  callModule(module = filterVarServer, id = "char",
                   x = reactive(test_char),
                   varname = reactive("Species"),
                   label = reactive("Species"))

    observe({
      req(res_char)
      tmp <- reactiveValuesToList(res_char)
      print(tmp)
    })

    # Test numeric
    res_num <- callModule(module = filterVarServer, id = "num",
                 x = reactive(test_num),
                 varname = reactive("Sepal.Length"),
                 label = reactive("Sepal.Length"))

    observe({
      req(res_num)
      tmp <- reactiveValuesToList(res_num)
      print(tmp)
    })

  }
  print(shinyApp(ui, server))
}
}
